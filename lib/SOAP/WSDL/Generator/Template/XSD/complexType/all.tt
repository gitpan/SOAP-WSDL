use Class::Std::Fast::Storable constructor => 'none';
use base qw(SOAP::WSDL::XSD::Typelib::ComplexType);

Class::Std::initialize();

{ # BLOCK to scope variables
[%
atomic_types = {};

FOREACH element = complexType.get_element %]
my %[% XSD.perl_name(element.get_name) %]_of :ATTR(:get<[% XSD.perl_name(element.get_name) %]>);
[%- END %]

__PACKAGE__->_factory(
    [ qw([% FOREACH element = complexType.get_element %]
        [% element.get_name -%]
[% END %]
    ) ],
    {
[% FOREACH element = complexType.get_element -%]
        '[% element.get_name %]' => \%[% XSD.perl_name(element.get_name) %]_of,
[% END -%]
    },
    {
[% FOREACH element = complexType.get_element;
    IF (type = element.get_type);
        element_type = definitions.first_types.find_type(complexType.expand( type )); -%]
        '[% element.get_name %]' => '[% XSD.create_xsd_name(element_type) %]',
[%    ELSE;
        IF (element.first_simpleType);
            atomic_types.${ element.get_name } = element.first_simpleType;
        ELSIF (element.first_complexType);
            atomic_types.${ element.get_name } = element.first_complexType;
        ELSE;
            THROW NOT_IMPLEMENTED , "Neither simple nor complex atomic type for element ${ element.get_name } - don't know what to do with it";
        END; %]
    '[% element.get_name %]' => '[% XSD.create_subpackage_name({ value => element }) %]',
[%  END;
END -%]
    }
);

} # end BLOCK

[% INCLUDE complexType/atomicTypes.tt(atomic_types = atomic_types) %]
