[% IF (complexType.get_attribute.size) %]
package [% XSD.get_type_prefix(complexType.get_targetNamespace) %]::[% complexType.get_name.replace('\.','::').replace('-','_') %]::_ATTR;
use base qw(SOAP::WSDL::XSD::Typelib::AttributeSet);

{ # BLOCK to scope variables
[%

FOREACH element = complexType.get_attribute %]
my %[% element.get_name %]_of :ATTR(:get<[% element.get_name %]>);
[%- END %]

__PACKAGE__->_factory(
    [ qw([% FOREACH element = complexType.get_attribute %]
        [% element.get_name -%]
[% END %]
    ) ],
    {
[% FOREACH element = complexType.get_attribute -%]
        [% element.get_name %] => \%[% element.get_name %]_of,
[% END -%]
    },
    {
[% FOREACH element = complexType.get_attribute;
    IF (type = element.get_type);
        element_type = complexType.expand( type );
-%]
        [% element.get_name %] => '[% XSD.get_type_prefix(element_type.0) %]::[% element_type.1 %]',
[%
    ELSE;
        IF (element.first_simpleType);
            THROW NOT_IMPLEMENTED , "Attributes with atomic simpleType definition are not implemented yet";
            atomic_types.${ element.get_name } = element.first_simpleType;
        ELSE;
            THROW NOT_IMPLEMENTED , "Neither simple nor complex atomic type - don't know what to do with it";
        END; %]
        [% element.get_name %] => '[% XSD.get_type_prefix(complexType.get_targetNamespace) %]::[% complexType.get_name %]::_[% element.get_name %]',
[%  END;
END -%]
    }
);

} # end BLOCK

[% END %]