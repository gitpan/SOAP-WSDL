package [% element_prefix %]::[% element.get_name %];
use strict;
use warnings;

{ # BLOCK to scope variables

sub get_xmlns { '[% element.get_targetNamespace %]' }

__PACKAGE__->__set_name('[% element.get_name %]');
__PACKAGE__->__set_nillable([% element.get_nillable %]);
__PACKAGE__->__set_minOccurs([% element.get_minOccurs %]);
__PACKAGE__->__set_maxOccurs([% element.get_maxOccurs %]);
__PACKAGE__->__set_ref([% IF element.get_ref; %]'[% element.get_ref %]'[% END %]);

[%- IF (type = element.get_type); -%]
use base qw(
	SOAP::WSDL::XSD::Typelib::Element
	[% INCLUDE _type_class.tt( type = type, node = element ) %]
);
[%- ELSIF (ref = element.get_ref); -%]
# element ref="[% ref %]"
use base qw(
	[% element_prefix %]::[% ref.split(':').1 %]
);
[%- ELSIF (simpleType = element.first_simpleType) %]
# atomic simpleType: <element><simpleType 
use base qw(
	SOAP::WSDL::XSD::Typelib::Element
);
[% INCLUDE simpleType/contentModel.tt %]
[% ELSIF (complexType = element.first_complexType) %]
use base qw(
	SOAP::WSDL::XSD::Typelib::Element
	SOAP::WSDL::XSD::Typelib::ComplexType
);
[% INCLUDE complexType/contentModel.tt;		
END %]


} # end of BLOCK
1;

# __END__

=pod

=head1 NAME

[% element_prefix %]::[% element.get_name %]

=head1 DESCRIPTION

Perl data type class for the XML Schema defined element
[% element.get_name %] from the namespace [% element.get_targetNamespace %].

=head1 METHODS

=head2 new

 my $element = [% element_prefix %]::[% element.get_name %]->new($data);

Constructor. The following data structure may be passed to new():

[% indent = ' '; INCLUDE element/POD/structure.tt; %]

=head1 AUTHOR

Generated by SOAP::WSDL

=cut

