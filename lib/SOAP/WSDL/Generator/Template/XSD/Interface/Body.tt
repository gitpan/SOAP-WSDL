[%  RETURN IF NOT item;
    type = definitions.find_portType( binding.expand( binding.get_type ) );
    port_op = type.find_operation( definitions.get_targetNamespace, operation.get_name );
    message = definitions.find_message( port_op.first_input.expand( port_op.first_input.get_message ) );
    part_from = message.get_part;
    PERL %]
    my $item = $stash->{ item };
    my $def = $stash->{ definitions };
    my $part_from = $stash->{ part_from };
    my $type_prefix = $stash->{ type_prefix };
    my $element_prefix = $stash->{ element_prefix };

    my @body_part_from = split m{\s}, $item->get_parts;
	
	my @parts;
	if (@body_part_from) {
		@parts = map {
	        my $part = $_;
			(grep { 
				my ($ns, $lname) = $def->expand( $_ );
				($lname eq $part->get_name)
				} @body_part_from
			)
			? do {
				my $name;
		       ($name = $part->get_element) 
		 	       ? do {
		 	       		$name =~s{ ^[^:]+: }{}xms;
		 	       		$element_prefix . '::' . $name;
		 	       }
		           : ($name = $part->get_type)
		               ? do {
							$name =~s{ ^[^:]+: }{}xms;
		               		$type_prefix . '::' . $name;
		               }
		               : die "input must have either type or element"
		      }
		    : ()
    	} @{ $part_from };
	}
   	else { 
    	@parts = map {
	        my $part = $_;
	        my $name;
	        ($name = $part->get_element) 
	 	       ? do {
	 	       		$name =~s{ ^[^:]+: }{}xms;
	 	       		"$element_prefix\::$name"
	 	       }
	           : ($name = $part->get_type)
	               ? do {
	               		$name =~s{ ^[^:]+: }{}xms;
	               		"$type_prefix\::$name"
	               }
	               : die "input must have either type or element";
	    } @{ $part_from };
    }
    $stash->{ parts } = \@parts;
    
    [% END;
 %]
           'use' => '[% item.get_use %]',
            namespace => '[% item.get_namespace %]',
            encodingStyle => '[% item.get_encodingStyle %]',
            parts => [qw( [% parts.join(' ') %] )],